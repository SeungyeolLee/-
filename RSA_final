#define _CRT_SECURE_NO_WARNINGS

#include   <stdio.h>

#include   <stdlib.h>

#include   <string.h>



/* 상수 정의 */

#define  m    1024			// 모듈러 n의 비트 수

#define  mp   512			// 비밀 소수 p의 비트 수

#define  mq   512			// 비밀 소수 q의 비트 수

#define  HASH 128

#define  LEN_PS 8			// 패딩 스트링의 크기

#define  DHEX 32

#define  OCT  8

#define  Char_NUM 8

#define  B_S  m/Char_NUM

#define  DATA_LEN	(B_S-LEN_PS-3)		// 평문 블록 길이

#define  mb   m/DHEX

#define  hmb  mb/2

#define  mpb  mp/DHEX

#define  mqb  mq/DHEX

#define  E_LENGTH 16



#define  rdx  0x100000000



/* 타입 정의 */

typedef unsigned long int ULINT;

typedef unsigned _int64 INT64;

typedef unsigned _int32 INT32;



/* 함수 선언 */

void RSA_Enc(unsigned char* p_text, unsigned char* result);			// RSA 암호화 함수

void RSA_Dec(unsigned char* c_text, unsigned char* result);			// RSA 복호화 함수

int  get_from_message(unsigned char* msg, short* a, short mn);		// 메시지 버퍼에서 데이터를 읽어서 이진 형태로 저장하는 함수

void put_to_message(unsigned char* msg, short* a, short mn);		// 이진 형태의 데이터를 메시지 버퍼에 저장하는 함수

void CONV_O_to_B(INT64* A, short* B, short mn);					// octet을 binary로 변환하는 함수

void CONV_B_to_O(short* A, INT64* B, short mn);					// binary를 octet로 변환하는 함수

void CONV_R_to_B(INT64* A, short* B, short mn);					// Radix를 binary로 변환하는 함수

void CONV_B_to_R(short* A, INT64* B, short mn);					// binary를 Radix로 변환하는 함수

void rand_g(short* out, short n);									// 랜덤 수를 생성하는 함수

void Modular(INT64* X, INT64* N, short mn);								// 모듈러 연산을 수행하는 함수

void Conv_mma(INT64* A, INT64* B, INT64* C, INT64* N, short mn);				// 고전적인 모듈러 감소 연산을 수행하는 함수

void LeftTORight_Pow(INT64* A, INT64* E, INT64* C, INT64* N, short mn);		// Left to Right 멱승을 수행하는 함수



/* 전역 변수 */

INT32  LAND = 0xFFFFFFFF;



// 공개키 파라미터

INT64 N[mb];		// 모듈러 n (= p * q)

INT64 E[mb];		// 공개키 e

INT64 D[mb];		// 비밀키 d



// 서명과 검증에 사용되는 버퍼(이진(binary) 형태)

short  s[m];				// 암호문(암호)

short  h[DATA_LEN * 8];		// 평문

short  v_h[m];				// 복호문(패딩 포함)

short  d_d[DATA_LEN * 8];		// 복호문(패딩 제외)

short  ps[LEN_PS * 8];		// 패딩 스트링



// 암호와 복호에 사용되는 버퍼(Radix와 octet 형태)

INT64 S[mb];				// 암호문

INT64 H[mb];				// 복호문(Radix)

INT64 DATA[DATA_LEN];		// 평문(octet)

INT64 EB[mb * 4];				// 암호문 블록(8 bit)

INT64 EB1[mb];				// 암호문 블록(16 bit)

INT64 D_EB[mb * 4];			// 복호문 블록(8 bit)

INT64 D_DATA[DATA_LEN];		// 복호 데이터(octet)		

INT64 O_PS[OCT];			// 패딩 스트링(octet)



#include "rsa_std.c"



void main()

{

	int i, count = 0;

	unsigned char p_text[512] = { 0, };

	unsigned char c_text[512] = { 0, }, d_text[512] = { 0, };



	printf("평문 입력 : ");

	gets(p_text);

	printf("\n");



	RSA_Enc(p_text, c_text);



	printf("암호문 \n");

	for (i = 0; i < B_S; i++)

		printf("%x ", c_text[i]);



	printf("\n\nthe encryption is completed.\n\n");



	RSA_Dec(c_text, d_text);



	printf("복호문 \n");

	for (i = 0; i < (int)strlen((char*)d_text); i++)

		printf("%c", d_text[i]);

	printf("\n");



	printf("\n the decryption is completed.\n");





}



// RSA 암호화

void RSA_Enc(unsigned char* p_text, unsigned char* result)

{

	int i, count = 0;

	short check = 1;

	FILE* fptr;



	if ((fptr = fopen("public_key.txt", "rb")) == NULL) {

		printf("file open failed!!\n");

		exit(1);

	}



	for (i = mb - 1; i >= 0; i--) fscanf(fptr, "%I64x", &N[i]);

	for (i = mb - 1; i >= 0; i--) fscanf(fptr, "%I64x", &E[i]);



	fclose(fptr);
	while (check == 1)

	{

		// 암호문을 읽어 이진 형태로 저장한다

		check = get_from_message(p_text + count * DATA_LEN, h, DATA_LEN);



		if (check != -1)

		{

			CONV_B_to_O(h, DATA, DATA_LEN);	// 이진 형태의 암호문을 Radix로 변환



			/*** m = c^d mod n (m-bit) ***/

			rand_g(ps, LEN_PS * 8);// 사용자의 비밀키로 복호화
			CONV_B_to_O(ps, O_PS, LEN_PS);

			EB[mb * 4 - 1] = 0x00;
			EB[mb * 4 - 2]= 0x02;
			for (i = mb * 4 - 3; i > DATA_LEN; i--)
				EB[DATA_LEN] = 0x00;

			for (i = DATA_LEN - 1; i >= 0; i--)
				EB[i] = DATA[i];

			for (i = mb * 4 - 1; i > 0; i = i - 4)
				EB1[i / 4] = (EB[i] << (DHEX - OCT)) + (EB[i - 1] << (OCT + OCT)) + (EB[i - 2] << OCT) + EB[i - 3];

			LeftTORight_Pow(EB1, E, S, N, mb);
			CONV_R_to_B(S, s, mb);
			put_to_message(result + count * B_S, s, B_S);
			count++;

		}

	}

}



// RSA 복호화

void RSA_Dec(unsigned char* c_text, unsigned char* result)

{

	int i, count = 0;

	short check = 1;

	FILE* fptr;



	// 사용자의 비밀키 파일을 연다

	if ((fptr = fopen("secret_key.txt", "rb")) == NULL)

	{

		printf("file open failed!!\n");

		exit(1);

	}



	// 파일로부터 공개키 d와 모듈러 n을 저장한다

	for (i = mb - 1; i >= 0; i--)  fscanf(fptr, "%I64x ", &N[i]);

	for (i = mb - 1; i >= 0; i--)  fscanf(fptr, "%I64x ", &D[i]);



	fclose(fptr);



	// 암호문을 모두 암호화 할 때까지 

	// 128 바이트씩 암호를 수행한다(11 바이트 = 패딩 포함)

	while (check == 1)

	{

		// 암호문을 읽어 이진 형태로 저장한다

		check = get_from_message(c_text + count * B_S, s, B_S);



		if (check != -1)

		{

			CONV_B_to_R(s, S, mb);	// 이진 형태의 암호문을 Radix로 변환



			/*** m = c^d mod n (m-bit) ***/

			LeftTORight_Pow(S, D, H, N, mb);	// 사용자의 비밀키로 복호화





			CONV_R_to_B(H, v_h, mb);			// 복호화된 데이터를 이진 형태로 변환

			CONV_B_to_O(v_h, D_EB, mb * 4);		// 이진 형태의 데이터를 octet으로 변환



			// 패딩을 제외한 복호문을 추출한다

			for (i = DATA_LEN - 1; i >= 0; i--)

				D_DATA[i] = D_EB[i];



			// 추출한 복호문을 이진 형태로 변환

			CONV_O_to_B(D_DATA, d_d, DATA_LEN);

			// 이진 형태의 복호문을 바이트 형태로 저장한다

			put_to_message(result + count * DATA_LEN, d_d, DATA_LEN);



			count++;

		}

	}

}



// 메시지를 읽어 이진 형태로 저장

int get_from_message(unsigned char* msg, short* a, short mn)

{

	register  i, j;

	short flag = 1, cnt = 0, mm;

	unsigned char b[m / Char_NUM] = { 0, };



	mm = mn * Char_NUM;



	for (i = 0; i < mm; i++)

		a[i] = 0;



	// 메시지 버퍼에서 한 바이트씩 읽는다

	for (i = 0; i < mn; i++)

	{

		if (msg[i] == '\0')

		{

			if (i == 0)

				return -1;



			if (mn < B_S)

			{

				flag = 0;

				break;

			}

		}



		b[i] = msg[i];

	}



	cnt = 0;

	// 바이트 단위의 데이터를 이진 형태로 변환

	for (i = mn - 1; i >= 0; i--)

	{

		for (j = 0; j < Char_NUM; j++)

		{

			a[cnt++] = (b[i] >> j) & 0x01;

		}

	}



	return(flag);

}



// 이진 형태의 데이터를 바이트 형태로 저장

void put_to_message(unsigned char* msg, short* a, short mn)

{

	register i, j;

	short cnt = 0;

	unsigned char b[m / Char_NUM] = { 0, };

	unsigned char mask[Char_NUM] = { 0x01,0x02,0x04,0x08,

									0x10,0x20,0x40,0x80 };



	cnt = 0;

	// 이진 형태의 데이터를 바이트 형태로 변환한다

	for (i = mn - 1; i >= 0; i--)

	{

		for (j = 0; j < Char_NUM; j++)

		{

			b[i] = b[i] + a[cnt++] * mask[j];

		}

	}

	// 변환한 데이터를 메시지 버퍼에 저장한다

	for (i = 0; i < mn; i++)

		msg[i] = b[i];

}
